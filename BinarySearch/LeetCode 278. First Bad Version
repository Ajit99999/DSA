/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        
        function find(start,end)
        {
            if(start > end)
            {
                return
            }
            else
            {
                 let mid = Math.floor((start+end)/2)

                 if( isBadVersion(mid) && !isBadVersion(mid-1))
                 {
                    return mid
                 }
                 else
                 {
                    if(isBadVersion(mid))
                    {
                         return find(start,mid-1)  
                    }
                    else
                    {
                        return find(mid+1, end)
                    }
                 }
            }
        }

       const res = find(1,n)
       return res
    };
};
