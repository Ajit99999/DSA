var TimeLimitedCache = function() {
    this.obj = { };
    this.time = Date.now();
};

/** 
 * @param {number} key
 * @param {number} value
 * @param {number} duration time until expiration in ms
 * @return {boolean} if un-expired key already existed
 */
TimeLimitedCache.prototype.set = function(key, value, duration) {
      
      if(this.obj[[key]])
      {
        clearTimeout(this.obj[[key]].timer);
        this.obj[[key]] =  {
            value : value,
        };
        const timer = setTimeout(()=>
        {
          delete this.obj[[key]];
        },duration) ;
        this.obj[[key]].timer = timer;
        return true
      }
      else
      {
        this.obj[[key]] = {
            value : value,
            timer : 0
        };
        const timer = setTimeout(()=>
        {
          delete this.obj[[key]];
        },duration)
        this.obj[[key]].timer = timer;
        return false
      }
};

/** 
 * @param {number} key
 * @return {number} value associated with key
 */
TimeLimitedCache.prototype.get = function(key) {
    if(this.obj[[key]])
    {
        return this.obj[[key]].value;
    }
    else
    {
        return -1;
    }
    
};

/** 
 * @return {number} count of non-expired keys
 */
TimeLimitedCache.prototype.count = function() {
     return Object.keys(this.obj).length;
};

/**
 * Your TimeLimitedCache object will be instantiated and called as such:
 * var obj = new TimeLimitedCache()
 * obj.set(1, 42, 1000); // false
 * obj.get(1) // 42
 * obj.count() // 1
 */
